version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: letsbonk_postgres
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: letsbonk_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network

  # gRPC Trading Service
  trading_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: letsbonk_trading_service
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
    ports:
      - "50051:50051"
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network
    volumes:
      - ./logs:/app/logs

  # Sniper Service
  sniper_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: letsbonk_sniper_service
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50052
    ports:
      - "50052:50052"
    depends_on:
      - postgres
      - redis
      - trading_service
    networks:
      - trading_network
    volumes:
      - ./logs:/app/logs

  # Copy Trading Service
  copy_trade_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: letsbonk_copy_trade_service
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50053
    ports:
      - "50053:50053"
    depends_on:
      - postgres
      - redis
      - trading_service
    networks:
      - trading_network
    volumes:
      - ./logs:/app/logs

  # Market Data Service
  market_data_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: letsbonk_market_data_service
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50054
    ports:
      - "50054:50054"
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network
    volumes:
      - ./logs:/app/logs

  # Web API Gateway
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile.node
    container_name: letsbonk_api_gateway
    environment:
      - NODE_ENV=production
      - PORT=3000
      - GRPC_TRADING_URL=trading_service:50051
      - GRPC_SNIPER_URL=sniper_service:50052
      - GRPC_COPY_TRADE_URL=copy_trade_service:50053
      - GRPC_MARKET_DATA_URL=market_data_service:50054
    ports:
      - "3000:3000"
    depends_on:
      - trading_service
      - sniper_service
      - copy_trade_service
      - market_data_service
    networks:
      - trading_network

  # Web Dashboard
  web_dashboard:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: letsbonk_web_dashboard
    environment:
      - REACT_APP_API_URL=http://api_gateway:3000
    ports:
      - "8080:80"
    depends_on:
      - api_gateway
    networks:
      - trading_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: letsbonk_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: letsbonk_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - trading_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: letsbonk_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api_gateway
      - web_dashboard
    networks:
      - trading_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trading_network:
    driver: bridge 