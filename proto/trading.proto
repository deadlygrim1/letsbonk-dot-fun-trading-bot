syntax = "proto3";

package trading;

// Trading Service
service TradingService {
  rpc PlaceOrder(Order) returns (OrderResponse);
  rpc GetOrder(OrderRequest) returns (Order);
  rpc CancelOrder(OrderRequest) returns (OrderResponse);
  rpc GetOrders(OrdersRequest) returns (OrdersResponse);
  rpc GetPortfolio(PortfolioRequest) returns (Portfolio);
  rpc GetBalance(BalanceRequest) returns (Balance);
}

// Sniper Service
service SniperService {
  rpc StartSniper(SniperConfig) returns (SniperResponse);
  rpc StopSniper(SniperRequest) returns (SniperResponse);
  rpc GetSniperStatus(SniperRequest) returns (SniperStatus);
  rpc AddTargetToken(TokenTarget) returns (SniperResponse);
  rpc RemoveTargetToken(TokenTarget) returns (SniperResponse);
  rpc GetSniperHistory(SniperRequest) returns (SniperHistory);
}

// Copy Trading Service
service CopyTradeService {
  rpc StartCopyTrading(CopyTradeConfig) returns (CopyTradeResponse);
  rpc StopCopyTrading(CopyTradeRequest) returns (CopyTradeResponse);
  rpc GetCopyTradeStatus(CopyTradeRequest) returns (CopyTradeStatus);
  rpc AddTraderToCopy(TraderConfig) returns (CopyTradeResponse);
  rpc RemoveTraderToCopy(TraderConfig) returns (CopyTradeResponse);
  rpc GetCopyTradeHistory(CopyTradeRequest) returns (CopyTradeHistory);
}

// Market Data Service
service MarketDataService {
  rpc GetTokenPrice(PriceRequest) returns (PriceResponse);
  rpc GetTokenInfo(TokenInfoRequest) returns (TokenInfo);
  rpc GetMarketData(MarketDataRequest) returns (MarketData);
  rpc SubscribeToPriceUpdates(PriceSubscription) returns (stream PriceUpdate);
  rpc GetPriorityFee(PriorityFeeRequest) returns (PriorityFeeResponse);
}

// Common Types
enum OrderType {
  BUY = 0;
  SELL = 1;
  SWAP = 2;
}

enum OrderStatus {
  PENDING = 0;
  EXECUTED = 1;
  CANCELLED = 2;
  FAILED = 3;
}

enum Cluster {
  MAINNET_BETA = 0;
  DEVNET = 1;
  TESTNET = 2;
  LOCALNET = 3;
}

// Trading Service Messages
message Order {
  string order_id = 1;
  string token_mint = 2;
  double amount = 3;
  OrderType order_type = 4;
  double slippage = 5;
  uint64 priority_fee = 6;
  uint64 compute_unit_limit = 7;
  Cluster cluster = 8;
  string wallet_address = 9;
  OrderStatus status = 10;
  int64 timestamp = 11;
  double executed_price = 12;
  double executed_amount = 13;
  string signature = 14;
}

message OrderResponse {
  bool success = 1;
  string message = 2;
  string order_id = 3;
  string signature = 4;
  uint64 compute_units_used = 5;
  double total_cost = 6;
}

message OrderRequest {
  string order_id = 1;
}

message OrdersRequest {
  string wallet_address = 1;
  OrderStatus status = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  int32 limit = 5;
  int32 offset = 6;
}

message OrdersResponse {
  repeated Order orders = 1;
  int32 total_count = 2;
}

message Portfolio {
  string wallet_address = 1;
  double total_value = 2;
  repeated TokenBalance tokens = 3;
  double total_profit = 4;
  double total_profit_percentage = 5;
}

message TokenBalance {
  string token_mint = 1;
  string symbol = 2;
  double balance = 3;
  double value = 4;
  double price = 5;
}

message Balance {
  string wallet_address = 1;
  Cluster cluster = 2;
  double balance = 3;
  string symbol = 4;
}

message BalanceRequest {
  string wallet_address = 1;
  Cluster cluster = 2;
}

message PortfolioRequest {
  string wallet_address = 1;
}

// Sniper Service Messages
message SniperConfig {
  string wallet_address = 1;
  string private_key = 2;
  repeated string target_tokens = 3;
  double buy_amount = 4;
  double max_slippage = 5;
  double profit_target = 6;
  double stop_loss = 7;
  bool auto_sell = 8;
  uint64 compute_unit_limit = 9;
  Cluster cluster = 10;
  string rpc_url = 11;
}

message SniperResponse {
  bool success = 1;
  string message = 2;
  string sniper_id = 3;
}

message SniperRequest {
  string sniper_id = 1;
  string wallet_address = 2;
}

message SniperStatus {
  string sniper_id = 1;
  bool is_running = 2;
  repeated string active_targets = 3;
  int32 successful_snipes = 4;
  int32 failed_snipes = 5;
  double total_profit = 6;
  int64 start_time = 7;
}

message TokenTarget {
  string sniper_id = 1;
  string token_mint = 2;
  double buy_amount = 3;
  double max_slippage = 4;
}

message SniperHistory {
  repeated SnipeRecord records = 1;
  int32 total_count = 2;
}

message SnipeRecord {
  string sniper_id = 1;
  string token_mint = 2;
  double buy_amount = 3;
  double buy_price = 4;
  double sell_price = 5;
  double profit = 6;
  double profit_percentage = 7;
  int64 buy_time = 8;
  int64 sell_time = 9;
  string buy_signature = 10;
  string sell_signature = 11;
  bool success = 12;
}

// Copy Trading Service Messages
message CopyTradeConfig {
  string source_wallet = 1;
  string target_wallet = 2;
  string private_key = 3;
  double allocation_percentage = 4;
  double max_position_size = 5;
  double min_trade_amount = 6;
  int32 max_trades_per_hour = 7;
  Cluster cluster = 8;
  string rpc_url = 9;
}

message CopyTradeResponse {
  bool success = 1;
  string message = 2;
  string copy_trade_id = 3;
}

message CopyTradeRequest {
  string copy_trade_id = 1;
  string target_wallet = 2;
}

message CopyTradeStatus {
  string copy_trade_id = 1;
  bool is_running = 2;
  string source_wallet = 3;
  string target_wallet = 4;
  int32 copied_trades = 5;
  double total_profit = 6;
  double allocation_percentage = 7;
  int64 start_time = 8;
}

message TraderConfig {
  string copy_trade_id = 1;
  string source_wallet = 2;
  double allocation_percentage = 3;
}

message CopyTradeHistory {
  repeated CopyTradeRecord records = 1;
  int32 total_count = 2;
}

message CopyTradeRecord {
  string copy_trade_id = 1;
  string source_wallet = 2;
  string target_wallet = 3;
  string token_mint = 4;
  double amount = 5;
  OrderType order_type = 6;
  double profit = 7;
  int64 timestamp = 8;
  string signature = 9;
  bool success = 10;
}

// Market Data Service Messages
message PriceRequest {
  string token_mint = 1;
  Cluster cluster = 2;
}

message PriceResponse {
  string token_mint = 1;
  double price = 2;
  double price_change_24h = 3;
  double volume_24h = 4;
  double market_cap = 5;
  int64 timestamp = 6;
}

message TokenInfoRequest {
  string token_mint = 1;
  Cluster cluster = 2;
}

message TokenInfo {
  string token_mint = 1;
  string name = 2;
  string symbol = 3;
  int32 decimals = 4;
  double total_supply = 5;
  double circulating_supply = 6;
  string mint_authority = 7;
  bool is_verified = 8;
  double liquidity = 9;
  double holders_count = 10;
}

message MarketDataRequest {
  Cluster cluster = 1;
  repeated string token_mints = 2;
}

message MarketData {
  Cluster cluster = 1;
  repeated PriceResponse prices = 2;
  double total_volume_24h = 3;
  double total_market_cap = 4;
  int64 timestamp = 5;
}

message PriceSubscription {
  string token_mint = 1;
  Cluster cluster = 2;
  double update_interval = 3; // seconds
}

message PriceUpdate {
  string token_mint = 1;
  double price = 2;
  double price_change = 3;
  int64 timestamp = 4;
}

message PriorityFeeRequest {
  Cluster cluster = 1;
}

message PriorityFeeResponse {
  Cluster cluster = 1;
  uint64 slow_priority_fee = 2;
  uint64 standard_priority_fee = 3;
  uint64 fast_priority_fee = 4;
  uint64 instant_priority_fee = 5;
  int64 timestamp = 6;
} 